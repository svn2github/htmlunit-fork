<project default="jar:jar"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven"
    xmlns:m="maven"
    xmlns:deploy="deploy"
    xmlns:x="jelly:xml"
    >

    <postGoal name="java:compile">
        <ant:copy
            file="src/java/com/gargoylesoftware/htmlunit/javascript/configuration/JavaScriptConfiguration.xml"
            toFile="${maven.build.dest}/com/gargoylesoftware/htmlunit/javascript/configuration/JavaScriptConfiguration.xml"/>
    </postGoal>

    <preGoal name="xdoc:transform">
        <attainGoal name="faq"/>
        <attainGoal name="createDependenciesPage"/>
        <attainGoal name="createJavaScriptConfigurationPage"/>
    </preGoal>

    <goal name="createDependenciesPage"
        description="Generates the dependencies document">

        <j:set var="destfile" value="${maven.build.dir}/generated-xdocs/dependencies.xml"/>
        <ant:mkdir dir="${maven.build.dir}/generated-xdocs"/>

        <u:file var="destfileFile" name="${destfile}"/>
        <j:set var="destfile" value="${destfileFile.getCanonicalPath()}"/>

        <j:set var="outputencoding" value="${maven.docs.outputencoding}"/>

        <j:file name="${destfile}" encoding="${outputencoding}" outputMode="xml">
<document>

    <properties>
        <title>Dependencies</title>
    </properties>
    <body>
        <section name="Dependencies">
            <p>
                These are the various dependencies required by HtmlUnit.  Some jars
                are mandatory for even the simplest use of HtmlUnit, others are optional.
                If the optional JARs are missing then the main functionality will
                continue to work but some functions will not.
            </p>
            <p>
                Htmlunit releases contain all needed jars and you donÂ´t need to retrieve them from other locations.
            </p>
            <p>
                If you're using maven to build your project and just want to know what dependencies
                to add to your POM, just scroll down to the <a href="#pomDependencies">next section</a>.
            </p>
            <table>
            <tr><th>Required JARs</th><th>Description</th></tr>
            <tr><td>HtmlUnit.jar</td><td>The main HtmlUnit classes</td></tr>
            <j:forEach var="lib" items="${pom.artifacts}">
                <j:set var="dep" value="${lib.dependency}"/>

                <j:if test="${dep.getProperty('htmlunit.group')=='required'}">
                    <tr>
                    <tr>
                        <td><a href="${dep.url}">${dep.artifact}</a></td>
                        <td>${dep.getProperty('htmlunit.description')}</td>
                    </tr>
                    </tr>
                </j:if>

            </j:forEach>

            <tr><th>Optional JARs for jelly scripting support</th><th>Description</th></tr>
            <j:forEach var="lib" items="${pom.artifacts}">
                <j:set var="dep" value="${lib.dependency}"/>
                <j:if test="${dep.getProperty('htmlunit.group')=='jelly'}">
                    <tr>
                    <tr>

                        <td><a href="${dep.url}">${dep.artifact}</a></td>
                        <td>${dep.getProperty('htmlunit.description')}</td>
                    </tr>
                    </tr>
                </j:if>
            </j:forEach>

            <tr><th>Optional JARs for running the unit tests</th><th>Description</th></tr>

            <j:forEach var="lib" items="${pom.artifacts}">
                <j:set var="dep" value="${lib.dependency}"/>
                <j:if test="${dep.getProperty('htmlunit.group')=='test'}">
                    <tr>
                        <td><a href="${dep.url}">${dep.artifact}</a></td>
                        <td>${dep.getProperty('htmlunit.description')}</td>
                    </tr>
                </j:if>

            </j:forEach>

            <tr><th>Optional JARs for SSL support</th><th>Description</th></tr>
            <tr>
                <td><a href="http://java.sun.com/products/jsse/">JSSE</a></td>
                <td>Java Secure Socket Extension.  Not required if you are running Java 1.4+</td>
            </tr>

            <tr><th>Other optional JARs</th><th>Description</th></tr>
            <j:forEach var="lib" items="${pom.artifacts}">
                <j:set var="dep" value="${lib.dependency}"/>
                <j:if test="${dep.getProperty('htmlunit.group')=='optional'}">
                    <tr>
                    <tr>
                        <td><a href="${dep.url}">${dep.artifact}</a></td>

                        <td>${dep.getProperty('htmlunit.description')}</td>
                    </tr>
                    </tr>
                </j:if>
            </j:forEach>
            </table>
        </section>

        <section name="Dependencies">
             <a name="pomDependencies"></a>
            <p>
                If you are using <a href="http://maven.apache.org">maven</a> to build your project 
                then you can simply cut and paste the following dependencies into your project.xml.
                The only dependency that isn't listed here is JSSE because it isn't in the maven
                repository but you don't need that anyway if you're using Java 1.4 or higher.
            </p>
            <p>
                Note that if you are reading this on the HtmlUnit website then the version numbers
                reflect what is currently in CVS, not neccessarily what versions are in use in
                the distribution that you have downloaded.  In particular, the version number
                for HtmlUnit itself may not reflect a version currently available in the maven
                repository.
            </p>
            <p>
                If you are reading this from the documentation that came bundled with a particular
                distribution of HtmlUnit then you can use these values without modification.
            </p>
            <source>
&lt;dependency&gt;
    &lt;groupId&gt;htmlunit&lt;/groupId&gt;
    &lt;artifactId&gt;htmlunit&lt;/artifactId&gt;
    &lt;version&gt;${pom.currentVersion}&lt;/version&gt;
&lt;/dependency&gt;
              <j:forEach var="lib" items="${pom.artifacts}">
                  <j:set var="dep" value="${lib.dependency}"/>
&lt;dependency&gt;
    &lt;groupId&gt;${dep.groupId}&lt;/groupId&gt;
    &lt;artifactId&gt;${dep.artifactId}&lt;/artifactId&gt;
    &lt;version&gt;${dep.version}&lt;/version&gt;
&lt;/dependency&gt;
              </j:forEach>
           </source>
        </section>
    </body>

</document>
        </j:file>
    </goal>

  <goal name="htmlunit:dist" prereqs="htmlunit:build-bin-dist,htmlunit:build-src-dist" 
    description="Build the distribution package" />
  <goal name="htmlunit:junit" prereqs="maven-junit-report-plugin:report,xdoc"
    description="Run the unit tests and create html results"/>

    <goal
        name="htmlunit:build-bin-dist"
        prereqs="jar:jar, site"
        description="Builds the binary distribution">

        <ant:mkdir dir="${maven.dist.bin.assembly.dir}/${maven.final.name}"/>
        <ant:mkdir dir="${maven.dist.bin.assembly.dir}/${maven.final.name}/lib"/>

        <ant:mkdir dir="${maven.dist.bin.assembly.dir}/${maven.final.name}/docs"/>

        <ant:echo>
            +------------------------------+
            | CREATING BINARY DISTRIBUTION |
            +------------------------------+
        </ant:echo>

        <ant:copy todir="${maven.dist.bin.assembly.dir}/${maven.final.name}">
            <ant:fileset dir=".">
                <ant:include name="README.txt"/>
                <ant:include name="LICENSE*"/>
            </ant:fileset>
        </ant:copy>

        <!-- Copy Jars -->
        <ant:copy todir="${maven.dist.bin.assembly.dir}/${maven.final.name}/lib">
            <ant:fileset dir="${maven.build.dir}">
                <ant:include name="${maven.final.name}.jar"/>
            </ant:fileset>
        </ant:copy>

        <!-- Copy dependencies -->
        <j:forEach var="lib" items="${pom.artifacts}">
            <j:set var="dep" value="${lib.dependency}"/>
            <j:if test="${dep.getProperty('htmlunit.group')!='test'}">
                <ant:copy todir="${maven.dist.bin.assembly.dir}/${maven.final.name}/lib" file="${lib.path}"/>
            </j:if>
        </j:forEach>

        <!-- Copy documentation -->
        <j:set var="docsDest"
            value="${pom.getPluginContext('maven-xdoc-plugin').getVariable('maven.docs.dest')}"/>
    <ant:echo>docsDest=${docsDest}</ant:echo>
        <ant:mkdir dir="${maven.dist.bin.assembly.dir}/${maven.final.name}/docs"/>
        <ant:copy todir="${maven.dist.bin.assembly.dir}/${maven.final.name}/docs">
            <ant:fileset dir="${docsDest}">
                <ant:include name="**"/>
            </ant:fileset>
        </ant:copy>

        <!-- Build the zip -->
        <ant:delete file="${maven.dist.bin.assembly.dir}/dist/${maven.final.name}.zip"/>
        <ant:mkdir dir="${maven.dist.bin.assembly.dir}/dist/"/>
        <ant:zip destfile="${maven.dist.bin.assembly.dir}/dist/${maven.final.name}.zip">
            <ant:zipfileset 
              dir="${maven.dist.bin.assembly.dir}/${maven.final.name}" 
              prefix="${maven.final.name}"/>
          </ant:zip>
  </goal>
  
  <goal
        name="htmlunit:build-src-dist"
        description="Builds the distribution">
  
        <ant:echo>
            +------------------------------+
            | CREATING SOURCE DISTRIBUTION |
            +------------------------------+
        </ant:echo>
        <j:set var="srcStagingDir"
            value="${maven.dist.bin.assembly.dir}/dist/${pom.name}-src-${pom.currentVersion}"/>
        <ant:delete dir="${srcStagingDir}"/>
        <ant:mkdir  dir="${srcStagingDir}"/>
        <ant:copy todir="${srcStagingDir}">
            <ant:fileset dir="${basedir}">
              <ant:include name="**/*.java"/>
              <ant:include name="**/*.xml"/>
              <ant:include name="**/*.xsd"/>
              <ant:include name="**/*.xsl"/>
              <ant:include name="**/*.jsl"/>
              <ant:include name="**/*.fml"/>
              <ant:include name="**/*.jelly"/>
              <ant:include name="**/*.gif"/>
              <ant:include name="**/*.jpg"/>
              <ant:include name="**/*.img"/>
              <ant:include name="**/*.png"/>
              <ant:include name="**/*.properties"/>
              <ant:include name="**/*.js"/>
              <ant:include name="**/package.html"/>
              <ant:include name="LICENSE.txt"/>
              <ant:exclude name="target/**"/>
              <ant:exclude name="ant-target/**"/>
              <ant:exclude name="ant-jars/**"/>
              <ant:exclude name="build_eclipse/**"/>
              <ant:exclude name="build.properties"/>
              <ant:exclude name="checkstyle.properties"/>
            </ant:fileset>
         </ant:copy>
         <ant:replace 
          file="${srcStagingDir}/project.properties"
          token="maven.clover.license.path="
          value="#maven.clover.license.path="/>
         <j:set var="srcDistFileName" value="${srcStagingDir}.zip"/>
         <ant:delete file="${srcDistFileName}"/>
         <ant:zip destfile="${srcDistFileName}">
            <ant:zipfileset dir="${srcStagingDir}" prefix="${pom.name}-src-${pom.currentVersion}"/>
          </ant:zip>
    </goal>

	<!-- copy resource files for the tests -->
    <postGoal name="test:compile">
        <ant:copy todir="target/test-classes/com/gargoylesoftware/htmlunit/testfiles">
            <ant:fileset dir="${basedir}/src/test/java/com/gargoylesoftware/htmlunit/testfiles">
			    <ant:exclude name="CVS"/>
            </ant:fileset>
        </ant:copy>
    </postGoal>

    <!-- Run all the tests as quickly as possible.  This only outputs results
         to the console so if you are trying to generate reports, you will
         need to call the slower "test" goal -->
    <goal
        name="htmlunit:test"
        description="Run all the tests and output results to the console."
        prereqs="test:compile">

        <ant:java fork="true" classname="junit.textui.TestRunner" dir="target/test-classes" failonerror="true">
              <ant:jvmarg value="-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog"/>
            <ant:arg value="com.gargoylesoftware.htmlunit.MainTestSuite"/>
            <ant:classpath>
                <ant:pathelement path="target/test-classes"/>
                <ant:pathelement path="${maven.build.dest}"/>
                <ant:path refid="maven.dependency.classpath"/>
            </ant:classpath>
        </ant:java>
    </goal>

    <goal name="htmlunit:sanity-check" description="Run tests against a bunch of live servers">
        <ant:java fork="yes" classname="com.gargoylesoftware.htmlunit.SanityCheck" dir="src/java">
            <ant:classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${maven.build.dest}"/>
                <ant:pathelement path="target/test-classes"/>
            </ant:classpath>
        </ant:java>
    </goal>

    <goal name="htmlunit:checkstyle" description="Display a human readable version of the checkstyle report">
        <attainGoal name="checkstyle:report"/>

        <x:parse var="doc" xml="target/checkstyle-raw-report.xml"/>
        <x:set var="filesWithErrors" select="$doc/checkstyle/file[count(error)!=0]"/>
        <x:forEach select="$filesWithErrors" var="element">
            <echo />
            <echo><x:expr select="@name"/></echo>
            <x:forEach select="$element/error" var="error">
                <echo>    <x:expr select="@line"/>: <x:expr select="@message"/></echo>
            </x:forEach>
        </x:forEach>
    </goal>
    
    <postGoal name="xdoc:register-reports">
        <attainGoal name="maven-linkcheck-plugin:deregister"/>
        <attainGoal name="maven-simian-plugin:register"/>
        <attainGoal name="maven-pmd-plugin:register"/>
        <attainGoal name="maven-clover-plugin:register"/>
		<attainGoal name="maven-changelog-plugin:deregister"/>        
    </postGoal>
    
    <goal name="createJavaScriptConfigurationPage" description="Create the javascript configuration page">

        <j:set var="destfile" value="${maven.build.dir}/generated-xdocs/javascriptConfiguration.xml"/>
        <ant:mkdir dir="${maven.build.dir}/generated-xdocs"/>

        <u:file var="destfileFile" name="${destfile}"/>
        <j:set var="destfile" value="${destfileFile.getCanonicalPath()}"/>

        <j:set var="outputencoding" value="${maven.docs.outputencoding}"/>

        <j:file name="${destfile}" encoding="${outputencoding}" outputMode="xml">
  <document>

    <properties>
      <title>JavaScript Configuration</title>
    </properties>
    <body>
      <section name="JavaScript Configuration">
        <p>
          Different versions of browsers will support different features in JavaScript. The file
          JavaScriptConfiguration.xml tells HtmlUnit what behaviours to expect from specific BrowserVersion's.
          The rest of this document is a formatted version of this configuration file.
        </p>
      </section>
      <x:parse var="doc"
        xml="src/java/com/gargoylesoftware/htmlunit/javascript/configuration/JavaScriptConfiguration.xml" />


      <x:set var="javascriptDocLinks" select="$doc/configuration/doclink" />
      <x:if select="$javascriptDocLinks">
        <section name="Documentation links">
          <ul>
            <x:forEach select="$javascriptDocLinks" var="javascriptDocLink">
              <x:set var="linkUrl" select="string(@url)" />
              <x:set var="linkDescr" select="string(@descr)" />
              <li>
                <j:choose>
                  <j:when test="${linkDescr!=''}">
                    <a href="${linkUrl}" target="_blank">${linkDescr}</a>
                  </j:when>
                  <j:otherwise>
                    <a href="${linkUrl}" target="_blank">${linkUrl}</a>
                  </j:otherwise>
                </j:choose>
              </li>
            </x:forEach>
          </ul>
        </section>
      </x:if>


      <x:set var="javascriptClasses" select="$doc/configuration/class" />
      <x:forEach select="$javascriptClasses" var="javascriptClass">
        <x:set var="className" select="string(@name)" />
        <section name="${className}">
          <a name="${className}" />
          <ul>
            <x:forEach select="doclink">
              <x:set var="linkUrl" select="string(@url)" />
              <x:set var="linkDescr" select="string(@descr)" />
              <li>
                <j:choose>
                  <j:when test="${linkDescr!=''}">
                    <a href="${linkUrl}" target="_blank">${linkDescr}</a>
                  </j:when>
                  <j:otherwise>
                    <a href="${linkUrl}" target="_blank">${linkUrl}</a>
                  </j:otherwise>
                </j:choose>
              </li>
            </x:forEach>
          </ul>

          <table>
            <tr>
              <th width="10%">Type</th>
              <th width="25%">Name</th>
							<th width="17%">Not Implemented</th>
              <th width="7%">Read</th>
              <th width="7%">Write</th>
              <th width="14%">Constraints</th>
              <th width="20%">Documentation links</th>
            </tr>
            <x:forEach select="property|function" var="property">
              <tr>
                <td>${property.name}</td>
                <td>
                  <x:expr select="@name" />
                </td>
                <td>
                  <x:expr select="@notImplemented" />
                </td>
                <td>
                  <x:expr select="@readable" />
                </td>
                <td>
                  <x:expr select="@writable" />
                </td>
                <td>
                  <x:forEach select="javascript">
                    Javascript &#160;
                    <x:expr select="@min-version" />
                    <br />
                  </x:forEach>
                  <x:forEach select="browser">
                    <x:expr select="@name" />
                    &#160;
                    <x:set var="minVersion" select="string(@min-version)" />
                    <x:set var="lessThanVersion" select="string(@less-than-version)" />
                    <x:set var="maxVersion" select="string(@max-version)" />

                    <j:choose>
                      <j:when test="${minVersion!='' and maxVersion!=''}">${minVersion}-${maxVersion}</j:when>
                      <j:when test="${minVersion!='' and lessThanVersion!=''}">
                        ${minVersion}-${lessThanVersion} (not including ${lessThanVersion})
                      </j:when>
                      <j:when test="${minVersion!=''}">${minVersion}+</j:when>
                      <j:when test="${maxVersion!=''}">up to ${maxVersion}</j:when>
                      <j:when test="${lessThanVersion!=''}">earlier than ${lessThanVersion}</j:when>
                    </j:choose>
                    <br />
                  </x:forEach>
                </td>
                <td>
                  <x:if select="doclink">
                    <x:forEach select="doclink">
                      <x:set var="linkUrl" select="string(@url)" />
                      <x:set var="linkDescr" select="string(@descr)" />
                      <j:choose>
                        <j:when test="${linkDescr!=''}">
                          <a href="${linkUrl}" target="_blank">${linkDescr}</a>
                        </j:when>
                        <j:otherwise>
                          <a href="${linkUrl}" target="_blank">${linkUrl}</a>
                        </j:otherwise>
                      </j:choose>
                    </x:forEach>
                    <br />
                  </x:if>
                </td>
              </tr>
            </x:forEach>
          </table>
        </section>
      </x:forEach>
    </body>

  </document>
        </j:file>
    </goal>
</project>