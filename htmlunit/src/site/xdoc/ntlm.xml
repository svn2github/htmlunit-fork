<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>NTLM support</title>
    </properties>

    <body>
        <section name="NTLM support in HtmlUnit">
            <p>
                As <a href="http://hc.apache.org/httpcomponents-client/ntlm.html">HttpClient does not provide support for NTLM authentication scheme out of the box</a>, so does not HtmlUnit.
            </p>
        </section>
        
        <section name="Using Samba JCIFS as an NTLM engine">
        	<p>
        	Follow these instructions to use the Samba JCIFS library with HtmlUnit:

    		<ol>
    			<li>
    				Download the latest release of the JCIFS library from the <a href="http://jcifs.samba.org/">Samba</a> web site.
    			</li>
    			
    			<li>
    				Implement a new HttpWebConnection that registers an NTLM scheme as follows:
            <source><![CDATA[
import java.io.IOException;

import jcifs.ntlmssp.Type1Message;
import jcifs.ntlmssp.Type2Message;
import jcifs.ntlmssp.Type3Message;
import jcifs.util.Base64;
import org.apache.http.auth.AuthScheme;
import org.apache.http.auth.AuthSchemeFactory;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.Credentials;
import org.apache.http.auth.NTCredentials;
import org.apache.http.impl.auth.NTLMScheme;
import org.apache.http.params.HttpParams;

import org.apache.http.impl.auth.NTLMEngine;
import org.apache.http.impl.auth.NTLMEngineException;
import org.apache.http.impl.client.AbstractHttpClient;

import com.gargoylesoftware.htmlunit.HttpWebConnection;
import com.gargoylesoftware.htmlunit.WebClient;

public class HttpWebConnectionWithNTLMSupport extends HttpWebConnection {

    public HttpWebConnectionWithNTLMSupport(final WebClient webClient) {
        super(webClient);
    }
    
    /**
     * Facility method to register NTLM credentials.
     */
    static void addNTLMCredentials(final WebClient webClient, 
            final String username, final String password, final String host,
            final int port, final String workstation, final String domain) {
        final AuthScope authscope = new AuthScope(host, port, AuthScope.ANY_REALM, AuthScope.ANY_SCHEME);
        final Credentials credentials = new NTCredentials(username, password, workstation, domain);
        webClient.getCredentialsProvider().setCredentials(authscope, credentials);
    }
    
    
    @Override
    protected AbstractHttpClient createHttpClient() {
        final AbstractHttpClient httpClient = super.createHttpClient();
        httpClient.getAuthSchemes().register("ntlm", new NTLMSchemeFactory());
        
        return httpClient;
    };

    private static class JCIFSEngine implements NTLMEngine {
        public String generateType1Msg(final String domain, final String workstation) throws NTLMEngineException {
            final Type1Message t1m = new Type1Message(Type1Message.getDefaultFlags(), domain, workstation);
            return Base64.encode(t1m.toByteArray());
        }

        public String generateType3Msg(final String username, final String password, 
                final String domain, final String workstation, final String challenge) throws NTLMEngineException {
            final Type2Message t2m;
            try {
                t2m = new Type2Message(Base64.decode(challenge));
            } catch (final IOException ex) {
                throw new NTLMEngineException("Invalid Type2 message", ex);
            }
            final Type3Message t3m = new Type3Message(t2m, password, domain, username, workstation, 0);
            return Base64.encode(t3m.toByteArray());
        }
    }
    
    private static class NTLMSchemeFactory implements AuthSchemeFactory {
        public AuthScheme newInstance(final HttpParams params) {
            return new NTLMScheme(new JCIFSEngine());
        }
    }
}}]]></source>
    			</li>
    		
    			<li>
    				Register a HttpWebConnectionWithNTLMSupport instance with your WebClient instance:
            <source><![CDATA[
webClient.setWebConnection(new HttpWebConnectionWithNTLMSupport(webClient);
]]></source>
    			</li>
    			
    			
    			<li>
    				Set NTLM Credentials for the web server you are going to access:
            <source><![CDATA[
HttpWebConnectionWithNTLMSupport.addNTLMCredentials(webClient, "username", "password",
    "myServer", -1, "myStation", "myDomain");
]]></source>
    			</li>

				<li>
				    You are done.
				</li>    			
    		</ol>
        	</p>
        </section>


        <section name="Why this code is not distributed with HtmlUnit?">
            <p>
                HtmlUnit follows the same policy than Apache HttpClient.
                JCIFS is licensed under the Lesser General Public License (LGPL). 
                This license is not compatible with the Apache Licenses under which all Apache Software is released.
            </p>
        </section>
    </body>
</document>
