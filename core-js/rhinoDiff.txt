diff --git a/src/org/mozilla/javascript/Arguments.java b/src/org/mozilla/javascript/Arguments.java
index f7027bc..1255fd9 100644
--- a/src/org/mozilla/javascript/Arguments.java
+++ b/src/org/mozilla/javascript/Arguments.java
@@ -50,7 +50,7 @@ final class Arguments extends IdScriptableObject
     @Override
     public String getClassName()
     {
-        return FTAG;
+        return "Object";
     }
 
     private Object arg(int index) {
diff --git a/src/org/mozilla/javascript/Context.java b/src/org/mozilla/javascript/Context.java
index df4c4c0..d974eb5 100644
--- a/src/org/mozilla/javascript/Context.java
+++ b/src/org/mozilla/javascript/Context.java
@@ -283,6 +283,22 @@ public class Context
      */
     public static final int FEATURE_ENHANCED_JAVA_ACCESS = 13;
 
+    /**
+     * Special to HtmlUnit's Rhino fork.
+     * Enable assignment to properties with only a getter defined.
+     * This was Rhino's standard behaviour until 1.7R2.
+     * By default {@link #hasFeature(int)} returns false.
+     */
+    public static final int FEATURE_HTMLUNIT_WRITE_READONLY_PROPERTIES = 14;
+
+    /**
+     * Special to HtmlUnit's Rhino fork.
+     * Indicates if a JavaScript catch statement can catch Java exceptions
+     * (exceptions occurring in host objects).
+     * By default {@link #hasFeature(int)} returns true.
+     */
+    public static final int FEATURE_HTMLUNIT_JS_CATCH_JAVA_EXCEPTION = 15;
+
     public static final String languageVersionProperty = "language version";
     public static final String errorReporterProperty   = "error reporter";
 
@@ -1325,7 +1341,7 @@ public class Context
                              securityDomain);
     }
 
-    final Script compileString(String source,
+    protected Script compileString(String source,
                                Evaluator compiler,
                                ErrorReporter compilationErrorReporter,
                                String sourceName, int lineno,
diff --git a/src/org/mozilla/javascript/ContextFactory.java b/src/org/mozilla/javascript/ContextFactory.java
index 642a3b3..2ea9d45 100644
--- a/src/org/mozilla/javascript/ContextFactory.java
+++ b/src/org/mozilla/javascript/ContextFactory.java
@@ -279,6 +279,12 @@ public class ContextFactory
 
           case Context.FEATURE_ENHANCED_JAVA_ACCESS:
             return false;
+
+          case Context.FEATURE_HTMLUNIT_WRITE_READONLY_PROPERTIES:
+            return false;
+
+          case Context.FEATURE_HTMLUNIT_JS_CATCH_JAVA_EXCEPTION:
+            return true;
         }
         // It is a bug to call the method with unknown featureIndex
         throw new IllegalArgumentException(String.valueOf(featureIndex));
diff --git a/src/org/mozilla/javascript/Delegator.java b/src/org/mozilla/javascript/Delegator.java
index 8e8bac4..e273d0f 100644
--- a/src/org/mozilla/javascript/Delegator.java
+++ b/src/org/mozilla/javascript/Delegator.java
@@ -85,85 +85,85 @@ public class Delegator implements Function {
      * @see org.mozilla.javascript.Scriptable#getClassName
      */
     public String getClassName() {
-        return obj.getClassName();
+        return getDelegee().getClassName();
     }
     /**
      * @see org.mozilla.javascript.Scriptable#get(String, Scriptable)
      */
     public Object get(String name, Scriptable start) {
-        return obj.get(name,start);
+        return getDelegee().get(name,start);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#get(int, Scriptable)
      */
     public Object get(int index, Scriptable start) {
-        return obj.get(index,start);
+        return getDelegee().get(index,start);
         }
     /**
      * @see org.mozilla.javascript.Scriptable#has(String, Scriptable)
      */
     public boolean has(String name, Scriptable start) {
-        return obj.has(name,start);
+        return getDelegee().has(name,start);
         }
     /**
      * @see org.mozilla.javascript.Scriptable#has(int, Scriptable)
      */
     public boolean has(int index, Scriptable start) {
-        return obj.has(index,start);
+        return getDelegee().has(index,start);
         }
     /**
      * @see org.mozilla.javascript.Scriptable#put(String, Scriptable, Object)
      */
     public void put(String name, Scriptable start, Object value) {
-        obj.put(name,start,value);
+        getDelegee().put(name,start,value);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#put(int, Scriptable, Object)
      */
     public void put(int index, Scriptable start, Object value) {
-        obj.put(index,start,value);
+        getDelegee().put(index,start,value);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#delete(String)
      */
     public void delete(String name) {
-        obj.delete(name);
+        getDelegee().delete(name);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#delete(int)
      */
     public void delete(int index) {
-        obj.delete(index);
+        getDelegee().delete(index);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#getPrototype
      */
     public Scriptable getPrototype() {
-        return obj.getPrototype();
+        return getDelegee().getPrototype();
     }
     /**
      * @see org.mozilla.javascript.Scriptable#setPrototype
      */
     public void setPrototype(Scriptable prototype) {
-        obj.setPrototype(prototype);
+        getDelegee().setPrototype(prototype);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#getParentScope
      */
     public Scriptable getParentScope() {
-        return obj.getParentScope();
+        return getDelegee().getParentScope();
     }
     /**
      * @see org.mozilla.javascript.Scriptable#setParentScope
      */
     public void setParentScope(Scriptable parent) {
-        obj.setParentScope(parent);
+        getDelegee().setParentScope(parent);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#getIds
      */
     public Object[] getIds() {
-        return obj.getIds();
+        return getDelegee().getIds();
     }
     /**
      * Note that this method does not get forwarded to the delegee if
@@ -181,13 +181,13 @@ public class Delegator implements Function {
         return (hint == null ||
                 hint == ScriptRuntime.ScriptableClass ||
                 hint == ScriptRuntime.FunctionClass) ?
-            this : obj.getDefaultValue(hint);
+            this : getDelegee().getDefaultValue(hint);
     }
     /**
      * @see org.mozilla.javascript.Scriptable#hasInstance
      */
     public boolean hasInstance(Scriptable instance) {
-        return obj.hasInstance(instance);
+        return getDelegee().hasInstance(instance);
     }
     /**
      * @see org.mozilla.javascript.Function#call
@@ -195,7 +195,7 @@ public class Delegator implements Function {
     public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                        Object[] args)
     {
-        return ((Function)obj).call(cx,scope,thisObj,args);
+        return ((Function)getDelegee()).call(cx,scope,thisObj,args);
     }
 
     /**
@@ -215,7 +215,7 @@ public class Delegator implements Function {
      */
     public Scriptable construct(Context cx, Scriptable scope, Object[] args)
     {
-        if (obj == null) {
+        if (getDelegee() == null) {
             //this little trick allows us to declare prototype objects for
             //Delegators
             Delegator n = newInstance();
@@ -229,7 +229,7 @@ public class Delegator implements Function {
             return n;
         }
         else {
-            return ((Function)obj).construct(cx,scope,args);
+            return ((Function)getDelegee()).construct(cx,scope,args);
         }
     }
 }
diff --git a/src/org/mozilla/javascript/FunctionObject.java b/src/org/mozilla/javascript/FunctionObject.java
index 376ef0c..600fa98 100644
--- a/src/org/mozilla/javascript/FunctionObject.java
+++ b/src/org/mozilla/javascript/FunctionObject.java
@@ -397,6 +397,9 @@ public class FunctionObject extends BaseFunction
         } else {
             if (!isStatic) {
                 Class<?> clazz = member.getDeclaringClass();
+                if (thisObj instanceof Delegator) {
+                    thisObj = ((Delegator) thisObj).getDelegee();
+                }
                 if (!clazz.isInstance(thisObj)) {
                     boolean compatible = false;
                     if (thisObj == scope) {
diff --git a/src/org/mozilla/javascript/InterpretedFunction.java b/src/org/mozilla/javascript/InterpretedFunction.java
index 92fb16a..8b8cc5f 100644
--- a/src/org/mozilla/javascript/InterpretedFunction.java
+++ b/src/org/mozilla/javascript/InterpretedFunction.java
@@ -176,5 +176,14 @@ final class InterpretedFunction extends NativeFunction implements Script
     {
         return idata.argIsConst[index];
     }
+
+    /**
+     * Provides the decompiled source of the function what is helpful
+     * while debugging.
+     */
+    @Override
+    public String toString() {
+        return decompile(2, 0);
+    }
 }
 
diff --git a/src/org/mozilla/javascript/Interpreter.java b/src/org/mozilla/javascript/Interpreter.java
index 678f8e5..b93659f 100644
--- a/src/org/mozilla/javascript/Interpreter.java
+++ b/src/org/mozilla/javascript/Interpreter.java
@@ -2842,7 +2842,11 @@ switch (op) {
     private static void enterFrame(Context cx, CallFrame frame, Object[] args,
                                    boolean continuationRestart)
     {
-        boolean usesActivation = frame.idata.itsNeedsActivation;
+       if (frame.parentFrame != null && !frame.parentFrame.fnOrScript.isScript()) {
+           frame.fnOrScript.defaultPut("caller", frame.parentFrame.fnOrScript);
+       }
+
+       boolean usesActivation = frame.idata.itsNeedsActivation;
         boolean isDebugged = frame.debuggerFrame != null;
         if(usesActivation || isDebugged) {
             Scriptable scope = frame.scope;
@@ -2891,6 +2895,8 @@ switch (op) {
     private static void exitFrame(Context cx, CallFrame frame,
                                   Object throwable)
     {
+        frame.fnOrScript.delete("caller");
+
         if (frame.idata.itsNeedsActivation) {
             ScriptRuntime.exitActivationFunction(cx);
         }
diff --git a/src/org/mozilla/javascript/MemberBox.java b/src/org/mozilla/javascript/MemberBox.java
index cc1a8cd..ca7ba43 100644
--- a/src/org/mozilla/javascript/MemberBox.java
+++ b/src/org/mozilla/javascript/MemberBox.java
@@ -121,6 +121,17 @@ final class MemberBox implements Serializable
     Object invoke(Object target, Object[] args)
     {
         Method method = method();
+        
+        // handle delegators
+        if (target instanceof Delegator) {
+            target = ((Delegator) target).getDelegee();
+        }
+        for (int i=0; i<args.length; ++i) {
+            if (args[i] instanceof Delegator) {
+                args[i] = ((Delegator) args[i]).getDelegee();
+            }
+        }
+        
         try {
             try {
                 return method.invoke(target, args);
@@ -145,7 +156,11 @@ final class MemberBox implements Serializable
             } while ((e instanceof InvocationTargetException));
             if (e instanceof ContinuationPending)
                 throw (ContinuationPending) e;
-            throw Context.throwAsScriptRuntimeEx(e);
+
+            if (e instanceof RhinoException || Context.getCurrentContext().hasFeature(Context.FEATURE_HTMLUNIT_JS_CATCH_JAVA_EXCEPTION))
+                throw Context.throwAsScriptRuntimeEx(e);            
+            else
+               throw new RuntimeException("Exception invoking " + method.getName(), e);
         } catch (Exception ex) {
             throw Context.throwAsScriptRuntimeEx(ex);
         }
diff --git a/src/org/mozilla/javascript/NativeError.java b/src/org/mozilla/javascript/NativeError.java
index 5053c5d..2f6c5ae 100644
--- a/src/org/mozilla/javascript/NativeError.java
+++ b/src/org/mozilla/javascript/NativeError.java
@@ -124,8 +124,10 @@ final class NativeError extends IdScriptableObject
     }
 
     public Object getStack() {
+        RhinoException.useMozillaStackStyle(true);
         Object value =  stackProvider == null ?
                 NOT_FOUND : stackProvider.getScriptStackTrace();
+        RhinoException.useMozillaStackStyle(false);
         // We store the stack as local property both to cache it
         // and to make the property writable
         setStack(value);
diff --git a/src/org/mozilla/javascript/ScriptRuntime.java b/src/org/mozilla/javascript/ScriptRuntime.java
index cfa5798..678e9fb 100644
--- a/src/org/mozilla/javascript/ScriptRuntime.java
+++ b/src/org/mozilla/javascript/ScriptRuntime.java
@@ -955,7 +955,10 @@ public class ScriptRuntime {
     public static Scriptable toObjectOrNull(Context cx, Object obj,
                                             final Scriptable scope)
     {
-        if (obj instanceof Scriptable) {
+        if (obj instanceof Delegator) {
+            return ((Delegator) obj).getDelegee();
+        }
+        else if (obj instanceof Scriptable) {
             return (Scriptable)obj;
         } else if (obj != null && obj != Undefined.instance) {
             return toObject(cx, scope, obj);
@@ -2519,6 +2522,8 @@ public class ScriptRuntime {
             return "undefined";
         if (value instanceof ScriptableObject)
         	return ((ScriptableObject) value).getTypeOf();
+        if (value instanceof Delegator)
+            return typeof(((Delegator) value).getDelegee());
         if (value instanceof Scriptable)
             return (value instanceof Callable) ? "function" : "object";
         if (value instanceof CharSequence)
@@ -3721,13 +3726,13 @@ public class ScriptRuntime {
 
     public static RuntimeException undefReadError(Object object, Object id)
     {
-        String idStr = (id == null) ? "null" : id.toString();
+        final String idStr = toString(id);
         return typeError2("msg.undef.prop.read", toString(object), idStr);
     }
 
     public static RuntimeException undefCallError(Object object, Object id)
     {
-        String idStr = (id == null) ? "null" : id.toString();
+        final String idStr = toString(id);
         return typeError2("msg.undef.method.call", toString(object), idStr);
     }
 
@@ -3735,9 +3740,8 @@ public class ScriptRuntime {
                                                    Object id,
                                                    Object value)
     {
-        String idStr = (id == null) ? "null" : id.toString();
-        String valueStr = (value instanceof Scriptable)
-                          ? value.toString() : toString(value);
+        final String idStr = toString(id);
+        final String valueStr = toString(value);
         return typeError3("msg.undef.prop.write", toString(object), idStr,
                           valueStr);
     }
diff --git a/src/org/mozilla/javascript/ScriptableObject.java b/src/org/mozilla/javascript/ScriptableObject.java
index 2925ec3..f355e01 100644
--- a/src/org/mozilla/javascript/ScriptableObject.java
+++ b/src/org/mozilla/javascript/ScriptableObject.java
@@ -241,11 +241,18 @@ public abstract class ScriptableObject implements Scriptable, Serializable,
                     if (Context.getContext().hasFeature(Context.FEATURE_STRICT_MODE)) {
                         // Based on TC39 ES3.1 Draft of 9-Feb-2009, 8.12.4, step 2,
                         // we should throw a TypeError in this case.
-                        throw ScriptRuntime.typeError1("msg.set.prop.no.setter", name);
+                        throw ScriptRuntime.typeError3("msg.set.prop.no.setter", name, start.getClassName(), Context.toString(value));
+                    }
+                    if (Context.getContext().hasFeature(Context.FEATURE_HTMLUNIT_WRITE_READONLY_PROPERTIES)) {
+                        // Odd case: Assignment to a property with only a getter 
+                        // defined. The assignment cancels out the getter.
+                        getter = null;
+                    }
+                    else {
+                        // Based on TC39 ES3.1 Draft of 9-Feb-2009, 8.12.4, step 2,
+                        // we should throw a TypeError in this case.
+                        throw ScriptRuntime.typeError3("msg.set.prop.no.setter", name, start.getClassName(), Context.toString(value));
                     }
-                    // Assignment to a property with only a getter defined. The
-                    // assignment is ignored. See bug 478047.
-                    return true;
                 }
             } else {
                 Context cx = Context.getContext();
diff --git a/src/org/mozilla/javascript/commonjs/module/ModuleScript.java b/src/org/mozilla/javascript/commonjs/module/ModuleScript.java
index a37cba5..a56b78e 100644
--- a/src/org/mozilla/javascript/commonjs/module/ModuleScript.java
+++ b/src/org/mozilla/javascript/commonjs/module/ModuleScript.java
@@ -14,7 +14,7 @@ import org.mozilla.javascript.Script;
  * use them and obtain them through a {@link ModuleScriptProvider}. Instances
  * are immutable.
  * @author Attila Szegedi
- * @version $Id: ModuleScript.java,v 1.3 2011/04/07 20:26:11 hannes%helma.at Exp $
+ * @version $Id: ModuleScript.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class ModuleScript implements Serializable
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/ModuleScriptProvider.java b/src/org/mozilla/javascript/commonjs/module/ModuleScriptProvider.java
index 3162cf5..1aba1ff 100644
--- a/src/org/mozilla/javascript/commonjs/module/ModuleScriptProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/ModuleScriptProvider.java
@@ -14,7 +14,7 @@ import java.net.URI;
  * obtain {@link ModuleScript} objects. We provide two default implementations,
  * but you can of course roll your own if they don't suit your needs.
  * @author Attila Szegedi
- * @version $Id: ModuleScriptProvider.java,v 1.4 2011/04/07 20:26:11 hannes%helma.at Exp $
+ * @version $Id: ModuleScriptProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public interface ModuleScriptProvider
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/Require.java b/src/org/mozilla/javascript/commonjs/module/Require.java
index ee27ccc..90aaeca 100644
--- a/src/org/mozilla/javascript/commonjs/module/Require.java
+++ b/src/org/mozilla/javascript/commonjs/module/Require.java
@@ -36,7 +36,7 @@ import org.mozilla.javascript.ScriptableObject;
  * program, you need to invoke either {@link #install(Scriptable)} or
  * {@link #requireMain(Context, String)}.
  * @author Attila Szegedi
- * @version $Id: Require.java,v 1.4 2011/04/07 20:26:11 hannes%helma.at Exp $
+ * @version $Id: Require.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class Require extends BaseFunction
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/RequireBuilder.java b/src/org/mozilla/javascript/commonjs/module/RequireBuilder.java
index 0069abd..7c828a6 100644
--- a/src/org/mozilla/javascript/commonjs/module/RequireBuilder.java
+++ b/src/org/mozilla/javascript/commonjs/module/RequireBuilder.java
@@ -18,7 +18,7 @@ import org.mozilla.javascript.Scriptable;
  * Every setter returns "this", so you can easily chain their invocations for
  * additional convenience.
  * @author Attila Szegedi
- * @version $Id: RequireBuilder.java,v 1.4 2011/04/07 20:26:11 hannes%helma.at Exp $
+ * @version $Id: RequireBuilder.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class RequireBuilder implements Serializable
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/CachingModuleScriptProviderBase.java b/src/org/mozilla/javascript/commonjs/module/provider/CachingModuleScriptProviderBase.java
index 8ce7ead..5f40429 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/CachingModuleScriptProviderBase.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/CachingModuleScriptProviderBase.java
@@ -21,7 +21,7 @@ import org.mozilla.javascript.commonjs.module.ModuleScriptProvider;
  * class and its subclasses are thread safe (and written to perform decently
  * under concurrent access).
  * @author Attila Szegedi
- * @version $Id: CachingModuleScriptProviderBase.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: CachingModuleScriptProviderBase.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public abstract class CachingModuleScriptProviderBase
 implements ModuleScriptProvider, Serializable
@@ -121,7 +121,7 @@ implements ModuleScriptProvider, Serializable
     /**
      * Instances of this class represent a loaded and cached module script.
      * @author Attila Szegedi
-     * @version $Id: CachingModuleScriptProviderBase.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+     * @version $Id: CachingModuleScriptProviderBase.java 7196 2012-08-07 09:24:05Z asashour $
      */
     public static class CachedModuleScript {
         private final ModuleScript moduleScript;
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/DefaultUrlConnectionExpiryCalculator.java b/src/org/mozilla/javascript/commonjs/module/provider/DefaultUrlConnectionExpiryCalculator.java
index 40bd542..d401110 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/DefaultUrlConnectionExpiryCalculator.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/DefaultUrlConnectionExpiryCalculator.java
@@ -13,7 +13,7 @@ import java.net.URLConnection;
  * of {@link #calculateExpiry(URLConnection)} returns
  * {@link System#currentTimeMillis()} incremented with the relative expiry.
  * @author Attila Szegedi
- * @version $Id: DefaultUrlConnectionExpiryCalculator.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: DefaultUrlConnectionExpiryCalculator.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class DefaultUrlConnectionExpiryCalculator
 implements UrlConnectionExpiryCalculator, Serializable
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/ModuleSource.java b/src/org/mozilla/javascript/commonjs/module/provider/ModuleSource.java
index e78de29..4038d14 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/ModuleSource.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/ModuleSource.java
@@ -28,7 +28,7 @@ import java.net.URI;
  * {@link Object#equals(Object)} as caches themselves can rely on it to compare
  * them semantically. Also, it is advisable to have them be serializable.
  * @author Attila Szegedi
- * @version $Id: ModuleSource.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: ModuleSource.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class ModuleSource implements Serializable
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProvider.java b/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProvider.java
index f21d145..426bdd7 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProvider.java
@@ -14,7 +14,7 @@ import org.mozilla.javascript.Scriptable;
  * Implemented by objects that can provide the source text for the script. The
  * design of the interface supports cache revalidation.
  * @author Attila Szegedi
- * @version $Id: ModuleSourceProvider.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: ModuleSourceProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public interface ModuleSourceProvider
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProviderBase.java b/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProviderBase.java
index e16d122..3c68e83 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProviderBase.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/ModuleSourceProviderBase.java
@@ -24,7 +24,7 @@ import org.mozilla.javascript.ScriptableObject;
  * have loading from an URI built into its design, for the simple reason that
  * the require.paths is defined in terms of URIs.
  * @author Attila Szegedi
- * @version $Id: ModuleSourceProviderBase.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: ModuleSourceProviderBase.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public abstract class ModuleSourceProviderBase implements
         ModuleSourceProvider, Serializable
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/MultiModuleScriptProvider.java b/src/org/mozilla/javascript/commonjs/module/provider/MultiModuleScriptProvider.java
index 3f7ef78..2376ee6 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/MultiModuleScriptProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/MultiModuleScriptProvider.java
@@ -16,7 +16,7 @@ import org.mozilla.javascript.commonjs.module.ModuleScriptProvider;
 /**
  * A multiplexer for module script providers.
  * @author Attila Szegedi
- * @version $Id: MultiModuleScriptProvider.java,v 1.4 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: MultiModuleScriptProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class MultiModuleScriptProvider implements ModuleScriptProvider
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/ParsedContentType.java b/src/org/mozilla/javascript/commonjs/module/provider/ParsedContentType.java
index d14e4c2..90fe4f6 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/ParsedContentType.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/ParsedContentType.java
@@ -11,7 +11,7 @@ import java.util.StringTokenizer;
  * Breaks a "contentType; charset=encoding" MIME type into content type and
  * encoding parts.
  * @author Attila Szegedi
- * @version $Id: ParsedContentType.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: ParsedContentType.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public final class ParsedContentType implements Serializable
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/SoftCachingModuleScriptProvider.java b/src/org/mozilla/javascript/commonjs/module/provider/SoftCachingModuleScriptProvider.java
index 1e6d940..0c66d05 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/SoftCachingModuleScriptProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/SoftCachingModuleScriptProvider.java
@@ -27,7 +27,7 @@ import org.mozilla.javascript.commonjs.module.ModuleScript;
  * for garbage collection if it is otherwise unused under memory pressure.
  * Instances of this class are thread safe.
  * @author Attila Szegedi
- * @version $Id: SoftCachingModuleScriptProvider.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: SoftCachingModuleScriptProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class SoftCachingModuleScriptProvider extends CachingModuleScriptProviderBase
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/StrongCachingModuleScriptProvider.java b/src/org/mozilla/javascript/commonjs/module/provider/StrongCachingModuleScriptProvider.java
index dcaac34..91955c7 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/StrongCachingModuleScriptProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/StrongCachingModuleScriptProvider.java
@@ -15,7 +15,7 @@ import org.mozilla.javascript.commonjs.module.ModuleScript;
  * thus a module once loaded will not be eligible for garbage collection before
  * the module provider itself becomes eligible.
  * @author Attila Szegedi
- * @version $Id: StrongCachingModuleScriptProvider.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: StrongCachingModuleScriptProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class StrongCachingModuleScriptProvider extends CachingModuleScriptProviderBase
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionExpiryCalculator.java b/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionExpiryCalculator.java
index d450e4f..adab1fb 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionExpiryCalculator.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionExpiryCalculator.java
@@ -11,7 +11,7 @@ import java.net.URLConnection;
  * calculating the expiry of a cached resource in cases where the server of the
  * resource doesn't provide explicit expiry information.
  * @author Attila Szegedi
- * @version $Id: UrlConnectionExpiryCalculator.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: UrlConnectionExpiryCalculator.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public interface UrlConnectionExpiryCalculator
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionSecurityDomainProvider.java b/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionSecurityDomainProvider.java
index ce01e6b..c2c416b 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionSecurityDomainProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/UrlConnectionSecurityDomainProvider.java
@@ -15,7 +15,7 @@ import org.mozilla.javascript.Context;
  * String, int, Object)}) based on the properties obtainable through their URL
  * connection.
  * @author Attila Szegedi
- * @version $Id: UrlConnectionSecurityDomainProvider.java,v 1.3 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: UrlConnectionSecurityDomainProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public interface UrlConnectionSecurityDomainProvider
 {
diff --git a/src/org/mozilla/javascript/commonjs/module/provider/UrlModuleSourceProvider.java b/src/org/mozilla/javascript/commonjs/module/provider/UrlModuleSourceProvider.java
index 1168aca..5840f17 100644
--- a/src/org/mozilla/javascript/commonjs/module/provider/UrlModuleSourceProvider.java
+++ b/src/org/mozilla/javascript/commonjs/module/provider/UrlModuleSourceProvider.java
@@ -29,7 +29,7 @@ import java.util.List;
  * model, and allows for fallback heuristic expiry calculation when no server
  * specified expiry is provided.
  * @author Attila Szegedi
- * @version $Id: UrlModuleSourceProvider.java,v 1.4 2011/04/07 20:26:12 hannes%helma.at Exp $
+ * @version $Id: UrlModuleSourceProvider.java 7196 2012-08-07 09:24:05Z asashour $
  */
 public class UrlModuleSourceProvider extends ModuleSourceProviderBase
 {
diff --git a/src/org/mozilla/javascript/resources/Messages.properties b/src/org/mozilla/javascript/resources/Messages.properties
index 35e4e52..c03915c 100644
--- a/src/org/mozilla/javascript/resources/Messages.properties
+++ b/src/org/mozilla/javascript/resources/Messages.properties
@@ -536,7 +536,7 @@ msg.prop.not.found =\
     Property {0} not found.
 
 msg.set.prop.no.setter =\
-    Cannot set property {0} that has only a getter.
+    Cannot set property [{1}].{0} that has only a getter to {2}.
 
 msg.invalid.type =\
     Invalid JavaScript value of type {0}
